#include <iostream>
#include <Windows.h>
#define random(min, max) min + rand() % (max - min + 1);

using namespace std;

void showField(int** field, const int SIZE) {
	system("cls");
	for (int i = 0; i < SIZE; i++) {
		for (int j = 0; j < SIZE; j++) {
			cout << field[i][j] << '\t';
		}
		cout << endl;
	}
}

bool canAddNumber(int** field, const int SIZE) {
	for (int i = 0; i < SIZE; i++) {
		for (int j = 0; j < SIZE; j++) {
			if (field[i][j] == 0) {
				return true;
			}
		}
	}
	return false;
}

void addNumber(int** field, const int SIZE) {
	if (canAddNumber(field, SIZE)) {
		int a, b;
		while (true) {
			a = random(0, 3);
			b = random(0, 3);
			if (field[a][b] == 0) {
				field[a][b] = 2;
				break;
			}
		}
	}
}

void moveUp(int** field, const int SIZE) {
	for (int j = 0; j < 4; j++) {
		for (int l = 0; l < SIZE - 1; l++) {
			for (int k = 0; k < SIZE - 1; k++) {
				if ((field[k][j] == 0) && (field[k][j] != field[k + 1][j])) {
					field[k][j] = field[k + 1][j];
					field[k + 1][j] = 0;
				}
			}
		}
		for (int i = 0; i < 3; i++) {
			switch (i) {
			case 0:
				if ((field[i][j] == field[i + 1][j]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i + 1][j] = field[i + 2][j];
					field[i + 2][j] = field[i + 3][j];
					field[i + 3][j] = 0;
				}
				break;
			case 1:
				if ((field[i][j] == field[i + 1][j]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i + 1][j] = field[i + 2][j];
					field[i + 2][j] = 0;
				}
				break;
			case 2:
				if ((field[i][j] == field[i + 1][j]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i + 1][j] = 0;
				}
				break;
			}
		}
	}
}

void moveDown(int** field, const int SIZE) {
	for (int j = 0; j < 4; j++) {
		for (int l = 0; l < SIZE - 1; l++) {
			for (int k = 3; k > 0; k--) {
				if ((field[k][j] == 0) && (field[k][j] != field[k - 1][j])) {
					field[k][j] = field[k - 1][j];
					field[k - 1][j] = 0;
				}
			}
		}
		for (int i = 3; i > 0; i--) {
			switch (i) {
			case 3:
				if ((field[i][j] == field[i - 1][j]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i - 1][j] = field[i - 2][j];
					field[i - 2][j] = field[i - 3][j];
					field[i - 3][j] = 0;
				}
				break;
			case 2:
				if ((field[i][j] == field[i - 1][j]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i - 1][j] = field[i - 2][j];
					field[i - 2][j] = 0;
				}
				break;
			case 1:
				if ((field[i][j] == field[i - 1][j]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i - 1][j] = 0;
				}
			}
		}
	}
}

void moveLeft(int** field, const int SIZE) {
	for (int i = 0; i < SIZE; i++) {
		for (int l = 0; l < SIZE - 1; l++) {
			for (int k = 0; k < SIZE - 1; k++) {
				if ((field[i][k] == 0) && (field[i][k] != field[i][k + 1])) {
					field[i][k] = field[i][k + 1];
					field[i][k + 1] = 0;
				}
			}
		}
		for (int j = 0; j < 3; j++) {
			switch (j) {
			case 0:
				if ((field[i][j] == field[i][j + 1]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i][j + 1] = field[i][j + 2];
					field[i][j + 2] = field[i][j + 3];
					field[i][j + 3] = 0;
				}
				break;
			case 1:
				if ((field[i][j] == field[i][j + 1]) && (field[i][j] != 0))
				{
					field[i][j] = (2 * field[i][j]);
					field[i][j + 1] = field[i][j + 2];
					field[i][j + 2] = 0;
				}
				break;
			case 2:
				if ((field[i][j] == field[i][j + 1]) && (field[i][j] != 0))
				{
					field[i][j] = (2 * field[i][j]);
					field[i][j + 1] = 0;
				}
				break;
			}
		}
	}
}

void moveRight(int** field, const int SIZE) {
	for (int i = 0; i < SIZE; i++) {
		for (int l = 0; l < SIZE - 1; l++) {
			for (int k = 3; k > 0; k--) {
				if ((field[i][k] == 0) && (field[i][k] != field[i][k - 1])) {
					field[i][k] = field[i][k - 1];
					field[i][k - 1] = 0;
				}
			}
		}
		for (int j = 3; j > 0; j--) {
			switch (j) {
			case 3:
				if ((field[i][j] == field[i][j - 1]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i][j - 1] = field[i][j - 2];
					field[i][j - 2] = field[i][j - 3];
					field[i][j - 3] = 0;
				}
				break;
			case 2:
				if ((field[i][j] == field[i][j - 1]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i][j - 1] = field[i][j - 2];
					field[i][j - 2] = 0;
				}
				break;
			case 1:
				if ((field[i][j] == field[i][j - 1]) && (field[i][j] != 0)) {
					field[i][j] = (2 * field[i][j]);
					field[i][j - 1] = 0;
				}
				break;
			}
		}
	}
}

void move(int** field, const int SIZE) {
	char dir;
	bool flag = true;
	while (flag) {
		cout << "Введите куда хотите переместить фишки (wasd): ";
		cin >> dir;
		switch (dir) {
		case 'w':
			moveUp(field, SIZE);
			flag = false;
			break;
		case 'a':
			moveLeft(field, SIZE);
			flag = false;
			break;
		case 's':
			moveDown(field, SIZE);
			flag = false;
			break;
		case 'd':
			moveRight(field, SIZE);
			flag = false;
			break;
		default:
			cout << "Неизвестное направление!" << endl;
		}
	}
}

bool checkWin(int** field, const int SIZE) {
	for (int i = 0; i < SIZE; i++) {
		for (int j = 0; j < SIZE; j++) {
			if (field[i][j] == 2048) {
				return true;
			}
		}
	}
	return false;
}

bool checkLose(int** field, const int SIZE) {
	for (int i = 0; i < SIZE; i++) {
		for (int j = 0; j < SIZE; j++) {
			if ((j > 0) && (field[i][j] == field[i][j - 1])) {
				return false; 
			}
			else if ((i > 0) && (field[i][j] == field[i - 1][j])) {
				return false;
			}
		}
	}
	return true;
}

int main()
{
	setlocale(LC_ALL, "ru");
	srand(time(NULL));
	const int SIZE = 4;
	int** field = new int* [SIZE];
	for (int i = 0; i < SIZE; i++) {
		field[i] = new int[SIZE] {};
	}
	addNumber(field, SIZE);
	addNumber(field, SIZE);
	while (!checkWin(field, SIZE) && !checkLose(field, SIZE)) {
		showField(field, SIZE);
		move(field, SIZE);
		addNumber(field, SIZE);
	}
	if (checkWin(field, SIZE)) {
		cout << "You won!";
	}
	else {
		cout << "You lost!";
	}
	return 0;
}
